<!DOCTYPE html>
<html>
  <head>
    <title>TDLR</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/custom.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
<style>
  .wrapper {min-width:500px;padding: 0 15px;}
  .navigation {position:fixed;}
</style>
  </head>

  <body ng-app="app">

    <!-- top navigation -->

  <nav class="navbar navbar-default navbar-fixed-top" role="banner">
      <div class="container">
        <div class="navbar-header">
          <button class="navbar-toggle" type="button" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a href="/" class="navbar-brand">tldr</a>
        </div>
        <nav class="collapse navbar-collapse" role="navigation">
          <ul class="nav navbar-nav">
            <li>
              <a href="#new">New</a>
            </li>
            <li>
              <a href="#hot">Hot</a>
            </li>
            <li>
              <a href="#bookmarks">Bookmarks</a>
            </li>
            <li>
              <a href="/newArticle">Add Article</a>
            </li>
            <li>
              <a href="#about">About</a>
            </li>
          </ul>
          <ul class="nav navbar-nav pull-right">
            <li>
              <a href="/login"><span class="btn">Sign In</span></a>
            </li>
          </ul>
        </nav>
      </div>
    </nav>

    <div style="height: 80px"></div>



<!-- side navigation -->

<div class="wrapper">

  <div class="row">

    <div class="col-md-3 left">

      <div class="navigation">
      <ul class="nav nav-stacked" id="sidebar">
        <li><a href="#sec0">Physics</a></li>
        <li><a href="#sec1">Chemistry</a></li>
        <li><a href="#sec2">Biology</a></li>
        <li><a href="#sec3">Earth and Ocean Sciences</a></li>
      </ul>
    </div>
    </div>


    <div class="col-md-9 content">
      <%- body %>

    </div>

  </div>

</div>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/aajquery-1.11.2.min.js"></script>
    <script src="/js/dependencies/angular.min.js"></script>
    <script src="/js/dependencies/bootstrap.min.js"></script>
    <script src="/js/dependencies/general.js"></script>
    <script src="/js/articleController.js"></script>
    <script src="/js/loginController.js"></script>
    <script src="/js/newArticleController.js"></script>
    <script src="/js/registerController.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
